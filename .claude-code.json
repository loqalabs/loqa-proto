{
  "rules": [
    "NEVER use AI attribution in commit messages (no 'Generated with Claude Code' or Co-Authored-By lines)",
    "Always read existing files before making changes",
    "Prefer editing existing files over creating new ones when possible",
    "Use TodoWrite tool to track progress on complex tasks",
    "Follow established git workflow and branch naming conventions",
    "Reference issue numbers in commits when applicable",
    "Update ALL affected documentation proactively without being asked",
    "Test that changes don't break existing functionality",
    "Maintain backward compatibility where possible",
    "ALWAYS run 'make quality-check' before any git push or commit",
    "NEVER push code that fails protocol buffer linting or validation",
    "Ensure protocol buffer files are properly formatted with buf",
    "Run 'make format' to auto-format .proto files before manual edits",
    "When adding labels to GitHub issues: First check existing labels with 'gh label list', look for semantically similar labels, use existing ones when possible, only create new labels when genuinely needed"
  ],
  "documentation_checklist": [
    "README.md files (main and service-specific)",
    "Architecture documentation",
    "Configuration guides and environment variables", 
    "CLAUDE.md (commands, services, ports, workflows)",
    "Getting started guides if user experience changes",
    "Docker compose comments for new services"
  ],
  "commit_guidelines": {
    "never_include": [
      "Generated with Claude Code",
      "Co-Authored-By: Claude",
      "ðŸ¤– Generated with",
      "AI attribution"
    ],
    "always_include": [
      "Reference to issue numbers when applicable",
      "Clear description of what changed and why"
    ]
  },
  "workflow_principles": {
    "scope_boundaries": "Ask for clarification when scope is unclear",
    "technical_approach": "Propose options when multiple paths exist", 
    "dependencies": "Stop and ask when blockers are found",
    "testing": {
      "coverage_requirements": "Maintain high test coverage for all code changes",
      "schema_validation": "Test all protobuf schema definitions and gRPC contracts",
      "backward_compatibility": "Test that changes maintain compatibility with existing services", 
      "edge_cases": "Test error conditions, boundary values, and failure scenarios",
      "regression_tests": "Add tests that prevent reoccurrence of fixed bugs",
      "test_before_commit": "Run existing tests before committing to ensure no breakage",
      "contract_testing": "Verify service contracts and API specifications",
      "breaking_change_detection": "Test and document any breaking changes to protocols"
    }
  },
  "repository_context": {
    "service_role": "Protocol definitions and shared contracts - defines communication interfaces between all services",
    "service_type": "Protocol/schema definitions (protobuf, gRPC)",
    "used_by": ["loqa-hub", "loqa-commander", "loqa-relay", "loqa-skills"],
    "microservice_architecture": {
      "structure": "Part of loqalabs/ microservice ecosystem - each subfolder is an independent git repository",
      "peer_services_location": "../ (one folder up from current repo)",
      "check_before_cloning": "Always check if ../SERVICE_NAME exists before attempting to clone repositories",
      "foundational_role": "Changes here affect ALL other services - coordinate carefully",
      "breaking_changes": "Require coordinated updates across all consuming services",
      "cross_service_changes": {
        "proto_updates": "Always coordinate with consuming services before making breaking changes",
        "complex_changes": "Create matching feature branches across ALL affected repos",
        "merge_order": "This repo FIRST, then all consuming services in dependency order"
      }
    }
  },
  "github_issue_management": {
    "tagging_workflow": {
      "step_1": "Always run 'gh label list' first to see existing labels",
      "step_2": "Look for semantically similar labels (e.g., 'dependencies' instead of 'deps', 'type: feature' instead of 'feature')",
      "step_3": "Use existing labels when they match the intent, even if wording is slightly different",
      "step_4": "Only create new labels when no existing label captures the concept",
      "step_5": "When creating new labels, follow existing naming patterns (e.g., 'area:', 'type:', 'priority:')"
    },
    "label_categories": {
      "type": ["type: bug", "type: feature", "type: chore", "type: improvement"],
      "priority": ["priority: high", "priority: medium", "priority: low"],
      "area": ["area: backend", "area: frontend", "area: docs", "area: infrastructure"],
      "milestone": ["p1-mvp", "p2-high-impact", "p3-future"],
      "component": ["skills", "dashboard", "stt", "tts", "llm", "relay", "mac-mini"]
    },
    "common_substitutions": {
      "deps": "dependencies",
      "feat": "type: feature",
      "bug": "type: bug",
      "docs": "area: docs",
      "ui": "area: frontend",
      "api": "area: backend",
      "critical": "priority: high",
      "urgent": "priority: high",
      "low": "priority: low"
    }
  },
  "best_practices": [
    "Preserve privacy-first design principles",
    "Maintain microservice architecture benefits", 
    "Keep changes focused and atomic",
    "Update cross-repository references consistently",
    "Use consistent tagging and categorization",
    "Make changes easy to find and understand later"
  ],
  "avoid": [
    "Making changes without understanding current state",
    "Breaking existing functionality unnecessarily",
    "Creating new files when editing existing ones works",
    "Rushing implementation without proper planning",
    "Ignoring dependencies between repositories",
    "Over-analyzing ideas that just need to be captured"
  ]
}