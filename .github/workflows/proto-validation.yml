name: Proto Validation

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - '*.proto'
      - 'generate.sh'
      - 'Makefile'
      - 'buf.yaml'
      - '.github/workflows/proto-validation.yml'
  push:
    branches: [ main ]
    paths:
      - '*.proto'
      - 'generate.sh' 
      - 'Makefile'
      - 'buf.yaml'
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  actions: read

jobs:
  proto-validation:
    name: Validate Protocol Buffers
    uses: loqalabs/.github/.github/workflows/proto-generate-bindings.yml@main
    with:
      protoc-version: '29.3'
      go-version: '1.25.1'
      python-version: '3.11'
      node-version: '20'
      languages: 'go,python,javascript'
      proto-files: 'audio.proto'
      generate-script: './generate.sh'

  breaking-change-detection:
    name: Breaking Change Detection
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout base branch
      uses: actions/checkout@v5
      with:
        ref: ${{ github.base_ref }}
        path: base
        
    - name: Checkout PR branch
      uses: actions/checkout@v5
      with:
        ref: ${{ github.head_ref }}
        path: pr
        
    - name: Install buf
      uses: bufbuild/buf-setup-action@v1
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Check for breaking changes
      id: breaking_check
      continue-on-error: true
      run: |
        cd pr
        
        # Use buf to check for breaking changes against the base branch
        buf breaking --against ../base || {
          echo "breaking_changes_detected=true" >> $GITHUB_OUTPUT
          echo "Breaking changes detected!"
          exit 1
        }
        
        echo "breaking_changes_detected=false" >> $GITHUB_OUTPUT
        echo "No breaking changes detected."
        
    - name: Comment on PR if breaking changes detected
      if: steps.breaking_check.outputs.breaking_changes_detected == 'true'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const message = `
          ## ⚠️ Breaking Changes Detected
          
          This PR contains breaking changes to the protocol buffer definitions. 
          
          ### Impact
          Breaking changes require coordinated updates across all consuming services:
          - \`loqa-hub\`
          - \`loqa-relay\` 
          - \`loqa-skills\`
          
          ### Required Actions
          1. **Coordinate with service teams** before merging
          2. **Create feature branches** in ALL affected services
          3. **Test cross-service compatibility** using development mode
          4. **Update consuming services** in dependency order
          5. **Plan coordinated deployment** to avoid service disruption
          
          ### Development Mode Testing
          Use development mode to test changes before releasing:
          \`\`\`bash
          # Enable development mode for testing
          cd ../
          ./loqa/tools/proto-dev-mode.sh dev
          
          # Test changes across services
          cd loqa-hub && make quality-check
          cd ../loqa-relay && make test
          
          # Switch back to production mode when done
          ./loqa/tools/proto-dev-mode.sh prod
          \`\`\`
          
          ---
          *This comment was automatically generated by the proto validation workflow.*
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: message
          });

  consumer-compatibility-test:
    name: Test Consumer Service Compatibility  
    runs-on: ubuntu-latest
    needs: proto-validation
    if: false  # Temporarily disabled - repositories not yet accessible
    
    strategy:
      matrix:
        consumer: ['loqa-hub', 'loqa-relay', 'loqa-skills']
      fail-fast: false
    
    timeout-minutes: 10  # Force timeout after 10 minutes
      
    steps:
    - name: Checkout proto changes
      uses: actions/checkout@v5
      with:
        path: loqa-proto
        
    - name: Checkout consumer service
      id: checkout_consumer
      continue-on-error: true
      uses: actions/checkout@v5
      with:
        repository: loqalabs/${{ matrix.consumer }}
        path: ${{ matrix.consumer }}
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Check if consumer service exists
      id: check_consumer
      run: |
        if [ "${{ steps.checkout_consumer.outcome }}" = "success" ] && [ -d "${{ matrix.consumer }}" ]; then
          echo "consumer_exists=true" >> $GITHUB_OUTPUT
          echo "✅ Successfully checked out ${{ matrix.consumer }}"
        else
          echo "consumer_exists=false" >> $GITHUB_OUTPUT
          echo "❌ Could not checkout ${{ matrix.consumer }} - repository may not exist or not be accessible"
          echo "This is expected if the service repository doesn't exist yet."
        fi
        
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.25.1'
        
    - name: Install Protocol Buffer Compiler
      run: |
        # Install protoc
        PROTOC_VERSION="29.3"
        curl -LO "https://github.com/protocolbuffers/protobuf/releases/download/v${PROTOC_VERSION}/protoc-${PROTOC_VERSION}-linux-x86_64.zip"
        sudo unzip -o protoc-${PROTOC_VERSION}-linux-x86_64.zip -d /usr/local bin/protoc
        sudo unzip -o protoc-${PROTOC_VERSION}-linux-x86_64.zip -d /usr/local 'include/*'
        rm -f protoc-${PROTOC_VERSION}-linux-x86_64.zip
        
        # Install Go protoc plugins
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
        
        # Verify installation
        protoc --version
        which protoc-gen-go
        which protoc-gen-go-grpc
        
    - name: Test consumer service with proto changes
      if: steps.check_consumer.outputs.consumer_exists == 'true'
      run: |
        cd ${{ matrix.consumer }}
        
        # Check if this service uses loqa-proto
        if ! grep -q "github.com/loqalabs/loqa-proto/go" go.mod; then
          echo "Service ${{ matrix.consumer }} does not use loqa-proto, skipping"
          exit 0
        fi
        
        # Replace proto dependency with local version
        go mod edit -replace github.com/loqalabs/loqa-proto/go=../loqa-proto/go
        
        # Generate fresh proto bindings
        cd ../loqa-proto
        ./generate.sh
        
        # Test consumer service compilation and tests
        cd ../${{ matrix.consumer }}
        go mod tidy
        
        # Run basic compatibility checks (skip linting for speed)
        echo "Testing Go compilation..."
        go build ./...
        
        echo "Running Go tests..."
        go test ./... -v -short
        
        # Only run full quality checks if explicitly requested via environment
        if [ "$FULL_QUALITY_CHECK" = "true" ] && [ -f "Makefile" ] && grep -q "quality-check" Makefile; then
          echo "Running full quality checks..."
          make quality-check
        else
          echo "Skipping full quality checks for compatibility testing"
        fi
        
    - name: Report compatibility results
      if: always()
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const service = '${{ matrix.consumer }}';
          const consumerExists = '${{ steps.check_consumer.outputs.consumer_exists }}' === 'true';
          const success = '${{ job.status }}' === 'success';
          
          let message;
          if (!consumerExists) {
            message = `⏭️ **${service}** - Repository not accessible, skipped`;
          } else {
            message = success ? 
              `✅ **${service}** - Compatible with protocol changes` :
              `❌ **${service}** - Compatibility issues detected`;
          }
            
          // Find existing comment or create new one
          const comments = await github.rest.issues.listComments({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
          
          const botComment = comments.data.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('Consumer Service Compatibility Results')
          );
          
          let body;
          if (botComment) {
            // Update existing comment
            body = botComment.body;
            if (body.includes(`**${service}**`)) {
              // Replace existing result for this service
              const regex = new RegExp(`[✅❌] \\*\\*${service}\\*\\*[^\n]*\n?`);
              body = body.replace(regex, `${message}\n`);
            } else {
              // Add new service result
              body = body.replace('---', `${message}\n---`);
            }
            
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            // Create new comment
            body = `## Consumer Service Compatibility Results\n\n${message}\n\n---\n*Results will update as tests complete*`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
          }