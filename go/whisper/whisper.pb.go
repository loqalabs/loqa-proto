// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v5.29.3
// source: whisper.proto

package whisper

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TranscribeRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Audio data as raw PCM float32 samples
	AudioData []float32 `protobuf:"fixed32,1,rep,packed,name=audio_data,json=audioData,proto3" json:"audio_data,omitempty"`
	// Sample rate of the audio
	SampleRate int32 `protobuf:"varint,2,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty"`
	// Language hint (optional, e.g., "en", "es", "fr")
	Language string `protobuf:"bytes,3,opt,name=language,proto3" json:"language,omitempty"`
	// Request ID for tracking/logging
	RequestId     string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TranscribeRequest) Reset() {
	*x = TranscribeRequest{}
	mi := &file_whisper_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TranscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscribeRequest) ProtoMessage() {}

func (x *TranscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_whisper_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscribeRequest.ProtoReflect.Descriptor instead.
func (*TranscribeRequest) Descriptor() ([]byte, []int) {
	return file_whisper_proto_rawDescGZIP(), []int{0}
}

func (x *TranscribeRequest) GetAudioData() []float32 {
	if x != nil {
		return x.AudioData
	}
	return nil
}

func (x *TranscribeRequest) GetSampleRate() int32 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

func (x *TranscribeRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *TranscribeRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type TranscribeResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Transcribed text
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// Language detected/used
	Language string `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
	// Processing time in milliseconds
	ProcessingTimeMs int64 `protobuf:"varint,3,opt,name=processing_time_ms,json=processingTimeMs,proto3" json:"processing_time_ms,omitempty"`
	// Success status
	Success bool `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`
	// Error message if not successful
	ErrorMessage string `protobuf:"bytes,5,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// Request ID for tracking
	RequestId     string `protobuf:"bytes,6,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TranscribeResponse) Reset() {
	*x = TranscribeResponse{}
	mi := &file_whisper_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TranscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscribeResponse) ProtoMessage() {}

func (x *TranscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_whisper_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscribeResponse.ProtoReflect.Descriptor instead.
func (*TranscribeResponse) Descriptor() ([]byte, []int) {
	return file_whisper_proto_rawDescGZIP(), []int{1}
}

func (x *TranscribeResponse) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *TranscribeResponse) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *TranscribeResponse) GetProcessingTimeMs() int64 {
	if x != nil {
		return x.ProcessingTimeMs
	}
	return 0
}

func (x *TranscribeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *TranscribeResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *TranscribeResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type HealthRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthRequest) Reset() {
	*x = HealthRequest{}
	mi := &file_whisper_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthRequest) ProtoMessage() {}

func (x *HealthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_whisper_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthRequest.ProtoReflect.Descriptor instead.
func (*HealthRequest) Descriptor() ([]byte, []int) {
	return file_whisper_proto_rawDescGZIP(), []int{2}
}

type HealthResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Service status
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Model information
	ModelName string `protobuf:"bytes,2,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
	// Version info
	Version       string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthResponse) Reset() {
	*x = HealthResponse{}
	mi := &file_whisper_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthResponse) ProtoMessage() {}

func (x *HealthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_whisper_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthResponse.ProtoReflect.Descriptor instead.
func (*HealthResponse) Descriptor() ([]byte, []int) {
	return file_whisper_proto_rawDescGZIP(), []int{3}
}

func (x *HealthResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *HealthResponse) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *HealthResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

var File_whisper_proto protoreflect.FileDescriptor

const file_whisper_proto_rawDesc = "" +
	"\n" +
	"\rwhisper.proto\x12\awhisper\"\x8e\x01\n" +
	"\x11TranscribeRequest\x12\x1d\n" +
	"\n" +
	"audio_data\x18\x01 \x03(\x02R\taudioData\x12\x1f\n" +
	"\vsample_rate\x18\x02 \x01(\x05R\n" +
	"sampleRate\x12\x1a\n" +
	"\blanguage\x18\x03 \x01(\tR\blanguage\x12\x1d\n" +
	"\n" +
	"request_id\x18\x04 \x01(\tR\trequestId\"\xd0\x01\n" +
	"\x12TranscribeResponse\x12\x12\n" +
	"\x04text\x18\x01 \x01(\tR\x04text\x12\x1a\n" +
	"\blanguage\x18\x02 \x01(\tR\blanguage\x12,\n" +
	"\x12processing_time_ms\x18\x03 \x01(\x03R\x10processingTimeMs\x12\x18\n" +
	"\asuccess\x18\x04 \x01(\bR\asuccess\x12#\n" +
	"\rerror_message\x18\x05 \x01(\tR\ferrorMessage\x12\x1d\n" +
	"\n" +
	"request_id\x18\x06 \x01(\tR\trequestId\"\x0f\n" +
	"\rHealthRequest\"a\n" +
	"\x0eHealthResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\tR\x06status\x12\x1d\n" +
	"\n" +
	"model_name\x18\x02 \x01(\tR\tmodelName\x12\x18\n" +
	"\aversion\x18\x03 \x01(\tR\aversion2\x92\x01\n" +
	"\x0eWhisperService\x12E\n" +
	"\n" +
	"Transcribe\x12\x1a.whisper.TranscribeRequest\x1a\x1b.whisper.TranscribeResponse\x129\n" +
	"\x06Health\x12\x16.whisper.HealthRequest\x1a\x17.whisper.HealthResponseB+Z)github.com/loqalabs/loqa-proto/go/whisperb\x06proto3"

var (
	file_whisper_proto_rawDescOnce sync.Once
	file_whisper_proto_rawDescData []byte
)

func file_whisper_proto_rawDescGZIP() []byte {
	file_whisper_proto_rawDescOnce.Do(func() {
		file_whisper_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_whisper_proto_rawDesc), len(file_whisper_proto_rawDesc)))
	})
	return file_whisper_proto_rawDescData
}

var file_whisper_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_whisper_proto_goTypes = []any{
	(*TranscribeRequest)(nil),  // 0: whisper.TranscribeRequest
	(*TranscribeResponse)(nil), // 1: whisper.TranscribeResponse
	(*HealthRequest)(nil),      // 2: whisper.HealthRequest
	(*HealthResponse)(nil),     // 3: whisper.HealthResponse
}
var file_whisper_proto_depIdxs = []int32{
	0, // 0: whisper.WhisperService.Transcribe:input_type -> whisper.TranscribeRequest
	2, // 1: whisper.WhisperService.Health:input_type -> whisper.HealthRequest
	1, // 2: whisper.WhisperService.Transcribe:output_type -> whisper.TranscribeResponse
	3, // 3: whisper.WhisperService.Health:output_type -> whisper.HealthResponse
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_whisper_proto_init() }
func file_whisper_proto_init() {
	if File_whisper_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_whisper_proto_rawDesc), len(file_whisper_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_whisper_proto_goTypes,
		DependencyIndexes: file_whisper_proto_depIdxs,
		MessageInfos:      file_whisper_proto_msgTypes,
	}.Build()
	File_whisper_proto = out.File
	file_whisper_proto_goTypes = nil
	file_whisper_proto_depIdxs = nil
}
