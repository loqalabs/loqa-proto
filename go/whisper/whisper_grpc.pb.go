// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: whisper.proto

package whisper

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WhisperService_Transcribe_FullMethodName = "/whisper.WhisperService/Transcribe"
	WhisperService_Health_FullMethodName     = "/whisper.WhisperService/Health"
)

// WhisperServiceClient is the client API for WhisperService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Whisper transcription service
type WhisperServiceClient interface {
	// Transcribe audio data to text
	Transcribe(ctx context.Context, in *TranscribeRequest, opts ...grpc.CallOption) (*TranscribeResponse, error)
	// Health check
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
}

type whisperServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWhisperServiceClient(cc grpc.ClientConnInterface) WhisperServiceClient {
	return &whisperServiceClient{cc}
}

func (c *whisperServiceClient) Transcribe(ctx context.Context, in *TranscribeRequest, opts ...grpc.CallOption) (*TranscribeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TranscribeResponse)
	err := c.cc.Invoke(ctx, WhisperService_Transcribe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whisperServiceClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, WhisperService_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WhisperServiceServer is the server API for WhisperService service.
// All implementations must embed UnimplementedWhisperServiceServer
// for forward compatibility.
//
// Whisper transcription service
type WhisperServiceServer interface {
	// Transcribe audio data to text
	Transcribe(context.Context, *TranscribeRequest) (*TranscribeResponse, error)
	// Health check
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	mustEmbedUnimplementedWhisperServiceServer()
}

// UnimplementedWhisperServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWhisperServiceServer struct{}

func (UnimplementedWhisperServiceServer) Transcribe(context.Context, *TranscribeRequest) (*TranscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transcribe not implemented")
}
func (UnimplementedWhisperServiceServer) Health(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedWhisperServiceServer) mustEmbedUnimplementedWhisperServiceServer() {}
func (UnimplementedWhisperServiceServer) testEmbeddedByValue()                        {}

// UnsafeWhisperServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WhisperServiceServer will
// result in compilation errors.
type UnsafeWhisperServiceServer interface {
	mustEmbedUnimplementedWhisperServiceServer()
}

func RegisterWhisperServiceServer(s grpc.ServiceRegistrar, srv WhisperServiceServer) {
	// If the following call pancis, it indicates UnimplementedWhisperServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WhisperService_ServiceDesc, srv)
}

func _WhisperService_Transcribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhisperServiceServer).Transcribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhisperService_Transcribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhisperServiceServer).Transcribe(ctx, req.(*TranscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhisperService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhisperServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhisperService_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhisperServiceServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WhisperService_ServiceDesc is the grpc.ServiceDesc for WhisperService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WhisperService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "whisper.WhisperService",
	HandlerType: (*WhisperServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Transcribe",
			Handler:    _WhisperService_Transcribe_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _WhisperService_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "whisper.proto",
}
