// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        v5.29.3
// source: audio.proto

package _go

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AudioChunk represents a chunk of audio data from a puck
type AudioChunk struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PuckId        string                 `protobuf:"bytes,1,opt,name=puck_id,json=puckId,proto3" json:"puck_id,omitempty"`                           // Unique identifier for the puck
	AudioData     []byte                 `protobuf:"bytes,2,opt,name=audio_data,json=audioData,proto3" json:"audio_data,omitempty"`                  // Raw audio data (16-bit PCM)
	SampleRate    int32                  `protobuf:"varint,3,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty"`              // Sample rate (e.g., 16000 Hz)
	IsWakeWord    bool                   `protobuf:"varint,4,opt,name=is_wake_word,json=isWakeWord,proto3" json:"is_wake_word,omitempty"`            // Whether wake word was detected
	IsEndOfSpeech bool                   `protobuf:"varint,5,opt,name=is_end_of_speech,json=isEndOfSpeech,proto3" json:"is_end_of_speech,omitempty"` // Whether this is the end of utterance
	Timestamp     int64                  `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                  // Unix timestamp in nanoseconds
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AudioChunk) Reset() {
	*x = AudioChunk{}
	mi := &file_audio_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AudioChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioChunk) ProtoMessage() {}

func (x *AudioChunk) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioChunk.ProtoReflect.Descriptor instead.
func (*AudioChunk) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{0}
}

func (x *AudioChunk) GetPuckId() string {
	if x != nil {
		return x.PuckId
	}
	return ""
}

func (x *AudioChunk) GetAudioData() []byte {
	if x != nil {
		return x.AudioData
	}
	return nil
}

func (x *AudioChunk) GetSampleRate() int32 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

func (x *AudioChunk) GetIsWakeWord() bool {
	if x != nil {
		return x.IsWakeWord
	}
	return false
}

func (x *AudioChunk) GetIsEndOfSpeech() bool {
	if x != nil {
		return x.IsEndOfSpeech
	}
	return false
}

func (x *AudioChunk) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// AudioResponse represents a response from the hub back to the puck
type AudioResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RequestId     string                 `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`          // Request identifier for correlation
	Transcription string                 `protobuf:"bytes,2,opt,name=transcription,proto3" json:"transcription,omitempty"`                   // Speech-to-text result
	Command       string                 `protobuf:"bytes,3,opt,name=command,proto3" json:"command,omitempty"`                               // Parsed command intent
	ResponseText  string                 `protobuf:"bytes,4,opt,name=response_text,json=responseText,proto3" json:"response_text,omitempty"` // Natural language response
	Success       bool                   `protobuf:"varint,5,opt,name=success,proto3" json:"success,omitempty"`                              // Whether processing was successful
	Error         string                 `protobuf:"bytes,6,opt,name=error,proto3" json:"error,omitempty"`                                   // Error message if unsuccessful
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AudioResponse) Reset() {
	*x = AudioResponse{}
	mi := &file_audio_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AudioResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioResponse) ProtoMessage() {}

func (x *AudioResponse) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioResponse.ProtoReflect.Descriptor instead.
func (*AudioResponse) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{1}
}

func (x *AudioResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *AudioResponse) GetTranscription() string {
	if x != nil {
		return x.Transcription
	}
	return ""
}

func (x *AudioResponse) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *AudioResponse) GetResponseText() string {
	if x != nil {
		return x.ResponseText
	}
	return ""
}

func (x *AudioResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AudioResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

var File_audio_proto protoreflect.FileDescriptor

const file_audio_proto_rawDesc = "" +
	"\n" +
	"\vaudio.proto\x12\n" +
	"loqa.audio\"\xce\x01\n" +
	"\n" +
	"AudioChunk\x12\x17\n" +
	"\apuck_id\x18\x01 \x01(\tR\x06puckId\x12\x1d\n" +
	"\n" +
	"audio_data\x18\x02 \x01(\fR\taudioData\x12\x1f\n" +
	"\vsample_rate\x18\x03 \x01(\x05R\n" +
	"sampleRate\x12 \n" +
	"\fis_wake_word\x18\x04 \x01(\bR\n" +
	"isWakeWord\x12'\n" +
	"\x10is_end_of_speech\x18\x05 \x01(\bR\risEndOfSpeech\x12\x1c\n" +
	"\ttimestamp\x18\x06 \x01(\x03R\ttimestamp\"\xc3\x01\n" +
	"\rAudioResponse\x12\x1d\n" +
	"\n" +
	"request_id\x18\x01 \x01(\tR\trequestId\x12$\n" +
	"\rtranscription\x18\x02 \x01(\tR\rtranscription\x12\x18\n" +
	"\acommand\x18\x03 \x01(\tR\acommand\x12#\n" +
	"\rresponse_text\x18\x04 \x01(\tR\fresponseText\x12\x18\n" +
	"\asuccess\x18\x05 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x06 \x01(\tR\x05error2T\n" +
	"\fAudioService\x12D\n" +
	"\vStreamAudio\x12\x16.loqa.audio.AudioChunk\x1a\x19.loqa.audio.AudioResponse(\x010\x01B\x1fZ\x1dloqa-voice-assistant/proto/gob\x06proto3"

var (
	file_audio_proto_rawDescOnce sync.Once
	file_audio_proto_rawDescData []byte
)

func file_audio_proto_rawDescGZIP() []byte {
	file_audio_proto_rawDescOnce.Do(func() {
		file_audio_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_audio_proto_rawDesc), len(file_audio_proto_rawDesc)))
	})
	return file_audio_proto_rawDescData
}

var file_audio_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_audio_proto_goTypes = []any{
	(*AudioChunk)(nil),    // 0: loqa.audio.AudioChunk
	(*AudioResponse)(nil), // 1: loqa.audio.AudioResponse
}
var file_audio_proto_depIdxs = []int32{
	0, // 0: loqa.audio.AudioService.StreamAudio:input_type -> loqa.audio.AudioChunk
	1, // 1: loqa.audio.AudioService.StreamAudio:output_type -> loqa.audio.AudioResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_audio_proto_init() }
func file_audio_proto_init() {
	if File_audio_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_audio_proto_rawDesc), len(file_audio_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_audio_proto_goTypes,
		DependencyIndexes: file_audio_proto_depIdxs,
		MessageInfos:      file_audio_proto_msgTypes,
	}.Build()
	File_audio_proto = out.File
	file_audio_proto_goTypes = nil
	file_audio_proto_depIdxs = nil
}
